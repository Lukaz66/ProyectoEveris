package com.everis.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.everis.models.Student;
import com.everis.services.IStudentService;

/** Proyecto: Clase para consumir los servicios e implementar métodos de IStudentService.
 * Esta clase consume los métodos que realiza el servicio..
 * @author Llanos_Canahuire_Waldo
 * @version 15/05/2019
 * @since V 1.0
 */
@RestController
@RequestMapping("/api/V1.0/students")
public class StudentController {

	Logger log = LoggerFactory.getLogger(this.getClass());

   /**
    * La anotación Autowired para la inyección de dependencia de IStudentService.
	*/
	@Autowired
	private IStudentService studentService;
		
	/**
	 * Metodo para obtener la lista de Student
	 * @return studentService.findAll() lista de todos los student
	 */
	@GetMapping
	public List<Student> get(){
		log.info("Los Student fueron listados");
		return studentService.findAll();
	}
	
	/**
	 * Metodo para insertar un nuevo Student
	 * @param Student es almacenada en el modelo. 
	 * @return studentService.save(stu) nuevo objeto insertado.
	 */
	@PostMapping
	public void save(@RequestBody Student stu) {
		log.info("Student fue insertado");
		studentService.save(stu);
	}
	
	/**
	 * Metodo para actualizar un student existente.
	 * @param student es para actualizar un objeto existente del modelo.
	 * @return studentService.save(stu) Student actualizado.
	 */
	@PutMapping
	public void update(@RequestBody Student stu) {
		log.info("Student fue actualizado");
		studentService.save(stu);
	}
	
	/**
	 * Metodo para eliminar un student existente.
	 * @param id es para eliminar un objeto del modelo existente por el Id.
	 */	
	@DeleteMapping(value = "/{id}")
	public void delete(@PathVariable ("id") Long id) {
		log.warn("Student eliminado");
		studentService.delete(id);
	}
}
